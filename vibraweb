#!/usr/bin/env perl

use Mojolicious::Lite;

use Text::MultiMarkdown;

use constant DEBUG => 0;

my $vibramail = "default\@colectivovibracion.org";

my @mail = qw(msmtp -a vibracion -t);
DEBUG && push @mail, qw(-v); # log email transaction

plugin 'Config';

helper markdown => sub {
	my $self = shift;
	return Text::MultiMarkdown::markdown(@_);
};

# gets remote address
helper raddress => sub {
	my $self = shift;
	my $ip;

	#return $ip if $ip = $self->req->headers->header('X-Real-IP');
	return $ip if $ip = $self->tx->remote_address;
};

# receives challenge and response as args, return 0 if check is ok, error code
# otherwise
helper recaptcha => sub {
	my $self	= shift;
	my $ch		= shift;
	my $res		= shift;

	my $r;
	my $tx;
	# reCAPTCHA conf
	my $re = $self->app->config->{recaptcha} or
	    return "cannot get recaptcha conf";

	$tx = $self->ua->post($re->{verify} => form =>
	    {privatekey => $re->{privk}, remoteip => $self->raddress(),
	     challenge => $ch, response => $res});
	unless ($r = $tx->success) {
		my ($err, $code) = $tx->error;
		return $code ? "$code response: $err" : "Connection error: $err";
	}
	
	return $1 if $r->body =~ /^false(\n.*)$/s;
	return 0;
};


# receives an email as argument, sends it to recipients in its content, returns
# 0 if everything is ok, returns error code otherwise.
helper sendmail => sub {
	my $self = shift;
        my $content = shift;
        my $mailfd;

        DEBUG && warn "DEBUG: $content";
        return 0 unless $content;
        open $mailfd, "|-", @mail or $self->app->log->fatal("cannot run @mail: $!");

        print $mailfd $content or $self->app->log->fatal("cannot print into mailfd: $!");
        return 0 if close $mailfd;
	if ($! == 0) { # exit() with non-zero status
		$self->app->log->error("@mail returned non-zero status.");
		return $? >> 8;
	} elsif ($!) {
		$self->app->log->warn("cannot close mailfd: $!");
		return -1;
	}

        return 0;

};

get "/" => "index";
get "/convocatoria" => "convocatoria";
get "/registro" => "registro";

# check form params, validate them, if ok generate an email body, send it
# to the autor, then generate everything is ok page, otherwise: generate a page
# showing bad params
post "/registro" => sub {
	my $self = shift;
	my @param = $self->param;
	my %valid;
	my %invalid; # (invalid fieldname => "reason of invalidness")
	my $mail;
	my $error = "";

	%valid = %invalid = map {($_, undef)} @param;
	for (@param) {
		my $val = $self->param($_);
		if ($_ eq "eventdur") {
			$valid{$_} = $val if
			    $val =~ /^[0-9]{1,2}:[0-9]{1,2}$/;
		} elsif ($_ eq "autorcol") {
			$valid{$_} = $val if $val =~ /^$|^.*$/;
		} elsif ($_ eq "autormail") {
			$valid{$_} = $val if $val =~ /^[^@]+@[A-za-z0-9.-]+$/;
		} elsif ($_ eq "autortel") {
			$valid{$_} = $val if $val =~ /^$|^[0-9]+$/;
		} elsif ($_ eq "eventtm") {
			$valid{$_} = $val if
			    $val eq "" or $val =~ /^[0-9]{1,2}:[0-9]{1,2}$/;
		} elsif ($_ eq "eventna") {
			$valid{$_} = $val if $val ne "" and length($val) < 32;
		} elsif ($_ eq "eventsubna") {
			$valid{$_} = $val if $val ne "" and length($val) < 32;
		} elsif ($_ eq "recaptcha") {
			next unless $self->param("recaptcha_response_field");
			my $recaptcha = $self->recaptcha($self->param("recaptcha_challenge_field"),
					     $self->param("recaptcha_response_field"));
			$self->app->log->debug("recaptcha: $recaptcha");
			$valid{$_} = 1 if $recaptcha eq 0;
		} else { # simple not emptyness evaluation for other fields
			$valid{$_} = $val if $val ne "";
		}
	}
	$self->app->log->debug("valid: ",
	    join(", ", map {defined $valid{$_} ?  "$_: $valid{$_}" : "$_: undef"}  sort keys %valid));

	$self->stash(valid => \%valid);
	$self->stash(ispost => 1);

	$error .= "ParÃ¡metros incorrectos", goto error if
	    grep {not defined $_} values %valid; # any param has error
	$error .= "No se pudo generar el correo. ", goto error if
	    not $mail = $self->render("registro/mail", format => 'txt', partial => 1);
	$error .= "No se pudo enviar el correo. ", goto error if
	    $self->sendmail($mail) != 0;

	return $self->render("registro", format => "html");

	error:

	$self->app->log->debug("error: $error");
	return $self->render("registro", format => "html", error => $error);
} => "registro";

app->config(hypnotoad => {proxy => 1});
app->start;
